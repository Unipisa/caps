#!/bin/bash

set -e

function msg {
  echo -e "\033[32;1mCAPS::DOCKER\033[34;0m $* \033[0m"
}

export HOME=/var/www

msg "Starting the CAPS Docker manager"

# We check for MySQL twice, because it could get the temporary server sometimes,
# and we need to make sure that the complete server is up and running before
# doing migrations.
while ! mysqladmin ping -h "${CAPS_DB_HOST}" -u "${CAPS_DB_USERNAME}" -p="{CAPS_DB_PASSWORD}" --silent; do
    msg "Waiting for MySQL ${CAPS_DB_HOST} to be ready ... "
    sleep 5
done

sleep 5

while ! mysqladmin ping -h "${CAPS_DB_HOST}" -u "${CAPS_DB_USERNAME}" -p="{CAPS_DB_PASSWORD}" --silent; do
    msg "Waiting for MySQL ${CAPS_DB_HOST} to be ready ... "
    sleep 5
done


if [ "$CAPS_SSH_TUNNEL" != "" ]; then
  msg "Starting the SSH tunnel"

  if [ ! -f /app/id_rsa ]; then
    msg "Please make sure to mount your public SSH key as /app/id_rsa.pub"
    exit 2
  fi

  # Make sure we're the one to own the key
  cp /app/id_rsa /app/id_rsa.key
  chown $(whoami) /app/id_rsa.key
  chmod 600 /app/id_rsa.key

  /app/ssh-tunnel-wrapper.sh ${CAPS_SSH_TUNNEL} /app/id_rsa.key ${CAPS_LDAP_URI} &

  # We now create a fake host entry to point to the LDAP server:
  LDAP_HOST=$(echo "${CAPS_LDAP_URI}" | sed "s|ldap\(s\)\?:\/\/||")
  LDAP_HOST=$(echo ${LDAP_HOST} | cut -d ':' -f1)

  # msg "Adding fake pointer ${LDAP_HOST} -> 127.0.0.1 to /etc/hosts"
  # echo "${LDAP_HOST}\t127.0.0.1" >> /etc/hosts

  msg "We are rewriting the configuration to point to the local forward:"
  msg ${CAPS_LDAP_URI} | grep ldaps: > /dev/null
  if [ $? -eq 0 ]; then
    CAPS_LDAP_URI="ldaps://localhost:1636"
  else
    CAPS_LDAP_URI="ldap://localhost:1636"
  fi

  msg "New CAPS_LDAP_URI: ${CAPS_LDAP_URI}"
  msg "Disabling certificate verification, as it cannot be guaranteed in this setting"
  CAPS_VERIFY_CERT="false"
fi

msg "Adjusting configuration file"
cp -v /app/config/app.php.template /app/config/app.php
sed -i "s|@CAPS_DB_HOST@|${CAPS_DB_HOST:-caps-db}|g" /app/config/app.php
sed -i "s|@CAPS_DB_USERNAME@|${CAPS_DB_USERNAME:-caps}|g" /app/config/app.php
sed -i "s|@CAPS_DB_PASSWORD@|${CAPS_DB_PASSWORD:-secret}|g" /app/config/app.php
sed -i "s|@CAPS_DB_DATABASE@|${CAPS_DB_DATABASE:-caps}|g" /app/config/app.php
sed -i "s|@CAPS_LDAP_URI@|${CAPS_LDAP_URI}|g" /app/config/app.php
sed -i "s|@CAPS_LDAP_BASE@|${CAPS_LDAP_BASE}|g" /app/config/app.php
sed -i "s|@CAPS_VERIFY_CERT@|${CAPS_VERIFY_CERT:-true}|g" /app/config/app.php
sed -i "s|@CAPS_CDS@|${CAPS_CDS:-}|g" /app/config/app.php
sed -i "s|@CAPS_TIMEZONE@|${CAPS_TIMEZONE:-Europe/Rome}|g" /app/config/app.php
sed -i "s|@CAPS_DISCLAIMER@|${CAPS_DISCLAIMER:-}|g" /app/config/app.php
sed -i "s|@CAPS_PSV_API@|${CAPS_PSV_API:-}|g" /app/config/app.php
sed -i "s|@MICROSOFT_OAUTH2_APPID@|${MICROSOFT_OAUTH2_APPID:-}|g" /app/config/app.php
sed -i "s|@MICROSOFT_OAUTH2_CLIENT_SECRET@|${MICROSOFT_OAUTH2_CLIENT_SECRET:-}|g" /app/config/app.php

msg "Generating security salt"
SALT=$(openssl rand -hex 32)
sed -i "s|__SALT__|${SALT}|" /app/config/app.php

export APACHE_PID_FILE=/var/run/apache2/apache2.pid
export APACHE_RUN_DIR=/var/run/apache2
export APACHE_RUN_USER=www-data
export APACHE_RUN_GROUP=www-data
export APACHE_LOG_DIR=/var/log/apache2

if [ ! -L /var/www/html ]; then
  msg "Setting up /var/www/html as a symbolic link to /app/webroot"
  rm -r /var/www/html
  ln -s /app/webroot /var/www/html
fi

msg "Running migrations"
bin/cake migrations migrate

msg "Clearing cache"
bin/cake cache clear_all

msg "Enabling mod_rewrite"
a2enmod rewrite

if [ "$DEBUG" = "true" ]; then
  msg "CAPS is starting in debug mode"
  PORT=":8765"
fi

msg "Starting Apache2, go to http://localhost${PORT}/"

if [ "$DEBUG" = "true" ]; then
  msg ""
  msg "If you started the development server with the default caps.env, "
  msg "you may login using user1 / user1 or user2 / user2 as credentials."
  msg ""
  msg "Run sudo docker exec -it caps /app/bin/cake grant-admin user1 to make"
  msg "user1 an administrator"
fi

apache2 -DFOREGROUND
